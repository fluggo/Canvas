# genhalf.py: Produces lookup tables for half->float and float->half.
# Based on the fast-half conversion code by Jeroen van der Zijp.
#
# This file is part of the Fluggo Media Library for high-quality
# video and audio processing.
#
# Copyright 2009 Brian J. Crowell <brian@fluggo.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

print '/* Auto-generated by genhalf.py */'
print '#include <stdint.h>'
print
print 'struct { uint16_t base; uint8_t shift; } f2h_baseshifttable[] = {'

for i in range(256):
    e = i - 127

    if e < -24:
        print '\t{ 0x0, 24 },'
    elif e < -14:
        print '\t{ ', hex(0x0400 >> (-14 - e)), ', ', str(-e - 1), ' },'
    elif e <= 15:
        print '\t{ ', hex((e + 15) << 10), ', 13 },'
    elif e < 128:
        print '\t{ 0x7C00, 24 },'
    else:
        print '\t{ 0x7C00, 13 },'

for i in range(256):
    e = i - 127

    if e < -24:
        print '\t{ 0x8000, 24 },'
    elif e < -14:
        print '\t{ ', hex((0x0400 >> (-14 - e)) | 0x8000), ', ', str(-e - 1), ' },'
    elif e <= 15:
        print '\t{ ', hex(((e + 15) << 10) | 0x8000), ', 13 },'
    elif e < 128:
        print '\t{ 0xFC00, 24 },'
    else:
        print '\t{ 0xFC00, 13 }'

print '};'
print

print 'uint32_t h2f_mantissatable[] = {'
print '\t0,'

for i in range(1,1024):
    m = i << 13
    e = 0

    while m & 0x00800000 == 0:
        e -= 0x00800000
        m <<= 1

    m &= ~0x00800000
    e += 0x38800000

    print '\t', hex(m | e), ','

for i in range(1024):
    print '\t', hex(0x38000000 + (i << 13)), ','

print '};'
print

print 'struct { uint16_t exponent, offset; } h2f_offsetexponenttable[] = {'

print '\t{ 0x0, 0 },'

for i in range(1,31):
    print '\t{ ', hex(i << 7), ', 1024 },'

print '\t{ 0x4780, 1024 },'
print '\t{ 0x8000, 0 },'

for i in range(1,31):
    print '\t{ ', hex(0x8000 | (i << 7)), ', 1024 },'

print '\t{ 0xC780, 1024 }'
print '};'

